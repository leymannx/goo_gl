<?php

/**
 * @file
 * Module file for goo_gl module.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds custom fieldset to the node type configuration form
 * where goo_gl simply can be made available/unavailable for a node type
 *
 * @see goo_gl.js
 */
function goo_gl_form_node_type_form_alter(&$form, &$form_state, $form_id) {

  // 1. NODE TYPE CONFIGURATION FORM
  $form['goo_gl'] = array(
    '#type'         => 'fieldset',
    '#title'        => 'goo.gl',
    '#collapsible'  => TRUE,
    '#collapsed'    => FALSE,
    // '#tree'         => TRUE,
    '#weight'       => -99,
    '#group'        => 'additional_settings',
    // Vertical tabs provide its most usable appearance when they are used to
    // include a summary of the information contained in the fieldset. To do
    // this, we attach additional JavaScript to handle changing the summary
    // when form settings are changed.
    '#attached'     => array(
      'js' => array(
        'vertical-tabs' => drupal_get_path('module', 'goo_gl') . '/goo_gl.js',
      ),
    ),
  );

  $enabled = variable_get('goo_gl_type_' . $form['#node_type']->type, FALSE) == TRUE;
  $form['goo_gl']['goo_gl_type'] = array(
    '#type'           => 'checkbox',
    '#title'          => t('Enable'),
    '#default_value'  => $enabled,
  );
}

/**
 * Implements hook_form_alter().
 *
 * Adds custom fieldset to the node edit form
 * with a checkbox to reload the goo_gl url
 * and a textfield to display it or manually enter a url
 *
 * @see goo_gl.js
 */
function goo_gl_form_alter(&$form, &$form_state, $form_id) {

  // 2. NODE EDIT FORM
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] . '_node_form' == $form_id) {

    // If goo_gl is enabled for this node type, we insert our control
    $enabled = variable_get('goo_gl_type_' . $form['#node']->type, FALSE) == TRUE;
    if ($enabled) {

      drupal_add_js(array('goo_gl' => array('enabled' => $enabled)), array('type' => 'setting'));

      $form['goo_gl'] = array(
        '#type'         => 'fieldset',
        '#title'        => 'goo.gl',
        '#collapsible'  => TRUE,
        '#collapsed'    => FALSE,
        // '#tree'         => TRUE,
        '#weight'       => -99,
        '#group'        => 'additional_settings',
        '#attached'     => array(
          'js' => array(
            'vertical-tabs' => drupal_get_path('module', 'goo_gl') . '/goo_gl.js',
          ),
        ),
      );

      $nid = isset($form['nid']['#value']) ? $form['nid']['#value'] : '';
      $default = _goo_gl_get_url($nid);
      $form['goo_gl']['goo_gl_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Use this setting instead'),
        '#default_value' => $default,
        // '#description' => t('As you type into this field, the summary will be updated in the tab.'),
      );
    }
  }
}

/**
 * Implements hook_node_insert().
 *
 * As a new node is being inserted into the database, we need to do our own
 * database inserts.
 */
function goo_gl_node_insert($node) {

  $enabled = variable_get('goo_gl_type_' . $node->type, FALSE) == TRUE;
  if ($enabled) {
    // Notice that we are ignoring any revision information using $node->nid
    db_insert('goo_gl_url')
    ->fields(array(
        'nid' => $node->nid,
        'url' => $node->goo_gl_url,
    ))
    ->execute();
  }
}

/**
* Implements of hook_node_update()
*/
 function goo_gl_node_update($node){

  db_update('goo_gl_url')
  ->fields(array(
      'nid' => $node->nid,
      'url' => $node->goo_gl_url,
  ))
  ->execute();
}

/**
 * Helper to @return string goo_gl_url by NID
 */
function _goo_gl_get_url($nid) {

  if(!empty($nid)) {
    // action
    $results = db_query('select * from {goo_gl_url} where nid = :nid', array(':nid' => $nid));
    foreach($results as $result) {
      // dpm($result);
      return $result->url;
    }
  } else {
    return '';
  }
}