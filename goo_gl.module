<?php

/**
 * @file
 * Module file for goo_gl module.
 */

/**
 * Implements hook_menu().
 *
 * Adds a menu entry on the config page to display a form to enter a mandatory
 * Google API key.
 */
function goo_gl_menu() {

  $items['admin/config/search/goo_gl'] = array(
    'title'             => 'Google URL Shortener',
    'description'       => 'Enter an API key.',
    'weight'            => 100,
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('goo_gl_api_key_form'),
    'access arguments'  => array('administer site configuration'),
    'file'              => 'goo_gl.admin.inc'
  );

  return $items;
}

/**
 * Implements hook_schema_alter().
 *
 * Adds a new field to the node table where Google's short URL will get
 * stored, so that you later can pull the short URL directly from the
 * node object $node->goo_gl_url.
 */
function goo_gl_schema_alter(&$schema) {

  $schema['node']['fields']['goo_gl_url'] = array(
    'description' => 'The shortened URL.',
    'type' => 'varchar',
    'length' => 20,
    'not null' => TRUE,
    'default' => '',
  );
}

/**
 * Implements hook_html_head_alter().
 *  Unset Drupal's shortlink.
 *
 * @see https://www.drupal.org/node/1304038
 */
function goo_gl_html_head_alter(&$head_elements) {

  if ($node = menu_get_object('node')) {

    $goo_gl_enabled = variable_get('goo_gl_enabled_' . $node->type, FALSE);
    $shortlink_enabled = variable_get('goo_gl_shortlink_' . $node->type, FALSE);
    if ($goo_gl_enabled && $shortlink_enabled) {

      foreach ($head_elements as $key => $element) {
        $attributes = &$element['#attributes'];
        if (isset($attributes['rel']) && $attributes['rel'] == 'shortlink' && strpos($attributes['href'], 'node')) {
          unset($head_elements[$key]);
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *   Set goo_gl shortlink.
 */
function goo_gl_preprocess_html(&$vars) {

  if ($node = menu_get_object('node')) {

    $goo_gl_enabled = variable_get('goo_gl_enabled_' . $node->type, FALSE);
    $shortlink_enabled = variable_get('goo_gl_shortlink_' . $node->type, FALSE);
    if ($goo_gl_enabled && $shortlink_enabled) {

      $data = array(
        '#type' => 'html_tag',
        '#tag' => 'link',
        '#attributes' => array(
          'rel' => 'shortlink',
          'href' => $node->goo_gl_url,
        ),
      );
      drupal_add_html_head($data, 'goo_gl_shortlink');
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds custom fieldset to the node type configuration form
 * where goo_gl simply can be made available/unavailable for a node type
 *
 * @see goo_gl.js
 */
function goo_gl_form_node_type_form_alter(&$form, &$form_state, $form_id) {

  // 1. NODE TYPE CONFIGURATION FORM
  $api_key = variable_get('goo_gl_api_key');
  $form['goo_gl'] = array(
    '#type'         => 'fieldset',
    '#title'        => 'goo.gl',
    '#collapsible'  => TRUE,
    '#collapsed'    => FALSE,
    '#weight'       => -99,
    '#group'        => 'additional_settings',
    '#disabled'     => isset($api_key) ? (empty($api_key) ? TRUE : FALSE) : TRUE,
    '#attached'     => array(
      'js' => array(
        'vertical-tabs' => drupal_get_path('module', 'goo_gl') . '/goo_gl.js',
      ),
    ),
  );

  $form['goo_gl']['note'] = array(
    '#prefix' => '<p>',
    '#markup' => 'goo.gl will be available only after you entered a Google API
key on the <a href="/admin/config/search/goo_gl">goo.gl config page</a>.',
    '#suffix' => '</p>',
  );

  $goo_gl_enabled = variable_get('goo_gl_enabled_' . $form['#node_type']->type, FALSE) == TRUE;
  $form['goo_gl']['goo_gl_enabled'] = array(
    '#type'           => 'checkbox',
    '#title'          => t('Enable Google URL shortening'),
    '#description'    => t('This will automatically create goo.gl short URLs from path aliases, fallback node path.'),
    '#default_value'  => $goo_gl_enabled,
  );

  $shortlink_enabled = variable_get('goo_gl_shortlink_' . $form['#node_type']->type, FALSE) == TRUE;
  $form['goo_gl']['goo_gl_shortlink'] = array(
    '#type'           => 'checkbox',
    '#title'          => t('Use goo.gl URL as shortlink instead of Drupal\'s node path'),
    '#description'    => t('Example: ' . htmlentities('<link rel="shortlink" href="http://goo.gl/F45H3j"\>')),
    '#default_value'  => $shortlink_enabled,
    '#states'         => array(
      'visible' => array(
        ':input[name="goo_gl_enabled"]' => array('checked' => TRUE),
      ),
    ),
  );

  $regeneration_enabled = variable_get('goo_gl_regeneration_' . $form['#node_type']->type, FALSE) == TRUE;
  $form['goo_gl']['goo_gl_regeneration'] = array(
    '#type'           => 'checkbox',
    '#title'          => t('Regenerate goo.gl URL when the node path alias gets updated.'),
    '#description'    => t('If you\'ve set automatic redirects on alias update, leave this unchecked.<br>By that you also can keep the statistics bound to one goo.gl URL.'),
    '#default_value'  => $regeneration_enabled,
    '#states'         => array(
      'visible' => array(
        ':input[name="goo_gl_enabled"]' => array('checked' => TRUE),
      ),
    ),
  );
  // TODO:
  // - Option anbieten, ob per default der Systhempfad oder der Aliaspfad
  //   genommen werden soll zum Generieren der Short URL?
}

/**
 * Implements hook_form_alter().
 *
 * Adds custom fieldset to the node edit form
 * with a checkbox to reload the goo_gl url
 * and a textfield to display it or manually enter a url
 *
 * @see goo_gl.js
 */
function goo_gl_form_alter(&$form, &$form_state, $form_id) {

  // 2. NODE EDIT FORM
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] . '_node_form' == $form_id) {

    // If goo_gl is enabled for this node type, we insert our control
    $enabled = variable_get('goo_gl_enabled_' . $form['#node']->type, FALSE) == TRUE;
    if ($enabled) {

      drupal_add_js(array('goo_gl' => array('enabled' => $enabled)), array('type' => 'setting'));

      $form['goo_gl'] = array(
        '#type'         => 'fieldset',
        '#title'        => 'goo.gl',
        '#collapsible'  => TRUE,
        '#collapsed'    => FALSE,
        '#weight'       => -99,
        '#group'        => 'additional_settings',
        '#attached'     => array(
          'js' => array(
            'vertical-tabs' => drupal_get_path('module', 'goo_gl') . '/goo_gl.js',
          ),
        ),
      );

      $nid = isset($form['nid']['#value']) ? $form['nid']['#value'] : '';
      $default = _goo_gl_get_url($nid);
      $form['goo_gl']['goo_gl_url'] = array(
        '#type'           => 'textfield',
        '#disabled'       => TRUE,
        '#title'          => t('goo.gl short URL'),
        '#default_value'  => $default,
      );
    }
  }
}

/**
 * Implements hook_node_insert().
 *
 * As a new node is being inserted into the database, we need to do our own
 * database inserts.
 */
function goo_gl_node_insert($node) {

  $enabled = variable_get('goo_gl_enabled_' . $node->type, FALSE) == TRUE;
  if ($enabled) {

    $path = 'node/'.$node->nid;
    $absolute_path = url($path, array('absolute' => TRUE, 'alias' => TRUE));

    $alias = drupal_get_path_alias($path);
    $absolute_alias = url($alias, array('absolute' => TRUE, 'alias' => TRUE));

    $goo_gl_url = _goo_gl_short_url($absolute_path, $absolute_alias);

    // Adds a new row to the singular goo_gl_url table.
    db_insert('goo_gl_url')
      ->fields(array(
        'nid' => $node->nid,
        'url' => $goo_gl_url,
      ))
      ->execute();

    // Updates the goo_gl_url field of the corresponding node in the node table.
    db_update('node')
      ->fields(array('goo_gl_url' => $goo_gl_url))
      ->condition('nid', $node->nid)
      ->execute();
  }
  // TODO:
  // - Variable abfragen, ob es per default der Systhempfad oder der Aliaspfad sein
  //   soll (siehe oben)?
}

/**
 * Implements hook_node_update()
 */
function goo_gl_node_update($node) {

  $goo_gl_enabled = variable_get('goo_gl_enabled_' . $node->type, FALSE);
  $regeneration_enabled = variable_get('goo_gl_regeneration_' . $node->type, FALSE);
  if ($goo_gl_enabled && $regeneration_enabled) {

    if (isset($node->goo_gl_url)) {

      // Check where the goo.gl URL is redirecting to
      $headers = get_headers($node->goo_gl_url, true);
      $absolute_location = $headers['Location'];

      $path_alias = base_path() . drupal_get_path_alias('node/' . $node->nid);
      $google_path = parse_url($absolute_location, PHP_URL_PATH);
      if ($google_path != $path_alias) {

        $new_path = 'node/'.$node->nid;
        $new_absolute_path = url($new_path, array('absolute' => TRUE, 'alias' => TRUE));

        $new_alias = drupal_get_path_alias($new_path);
        $new_absolute_alias = url($new_alias, array('absolute' => TRUE, 'alias' => TRUE));

        $new_goo_gl_url = _goo_gl_short_url($new_absolute_path, $new_absolute_alias);

        // Adds a new row to the singular goo_gl_url table.
        db_update('goo_gl_url')
          ->fields(array('url' => $new_goo_gl_url))
          ->condition('nid', $node->nid)
          ->execute();

        // Updates the goo_gl_url field of the corresponding node in the node table.
        db_update('node')
          ->fields(array('goo_gl_url' => $new_goo_gl_url))
          ->condition('nid', $node->nid)
          ->execute();
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function goo_gl_node_delete($node) {
  $nid = $node->nid;
  db_delete('goo_gl_url')
    ->condition('nid', $nid)
    ->execute();
}

/**
 * Implements hook_module_implements_alter()
 *
 * To have the alias path available in hook_node_insert() we let any alias
 * path creating modules act first and move goo_gl to the end of the list.
 */
function goo_gl_module_implements_alter(&$implementations, $hook) {

  if ($hook == 'node_insert' || $hook == 'node_update') {
    $group = $implementations['goo_gl'];
    unset($implementations['goo_gl']);
    $implementations['goo_gl'] = $group;
  }
}

/**
 * Helper to create goo.gl short URL from path alias if available.
 * Fallback is to create short URL from node path.
 *
 * @param $path Drupal node path (node/123)
 * @param $alias Node path alias
 * @return mixed goo.gl short URL
 */
function _goo_gl_short_url($path, $alias) {

  $long_url = (!empty($alias)) ? $alias : $path;
  $api_key = variable_get('goo_gl_api_key');

  // No need to modify any of the code below.
  $post_data = array('longUrl' => $long_url, 'key' => $api_key);
  $json_data = json_encode($post_data);
  $curl_obj = curl_init();

  curl_setopt($curl_obj, CURLOPT_URL, 'https://www.googleapis.com/urlshortener/v1/url?key='.$api_key);
  curl_setopt($curl_obj, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($curl_obj, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($curl_obj, CURLOPT_HEADER, 0);
  curl_setopt($curl_obj, CURLOPT_HTTPHEADER, array('Content-type:application/json'));
  curl_setopt($curl_obj, CURLOPT_POST, 1);
  curl_setopt($curl_obj, CURLOPT_POSTFIELDS, $json_data);

  $response = curl_exec($curl_obj);
  $json = json_decode($response);
  curl_close($curl_obj);

  return $json->id;
}

/**
 * Helper to @return string goo_gl_url by NID
 */
function _goo_gl_get_url($nid) {

  if(!empty($nid)) {
    //  $results = db_query('select url from {goo_gl_url} where nid = :nid', array(':nid' => $nid));
    $results = db_query('select goo_gl_url from {node} where nid = :nid', array(':nid' => $nid));
    foreach($results as $result) {
      return $result->goo_gl_url;
    }
  } else {
    return '';
  }
}
