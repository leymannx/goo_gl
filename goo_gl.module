<?php

/**
 * @file
 * Module file for goo_gl module.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds custom fieldset to the node form, and attach ajax behaviour for vertical
 * panels to update the settings description.
 *
 * @see goo_gl.js
 */
function goo_gl_form_alter(&$form, $form_state, $form_id) {

  // 1. First, check for the node type configuration form.
  if ($form_id == 'node_type_form') {
    // Alter the node type's configuration form to add our setting. We don't
    // need to worry about saving this value back to the variable, the form
    // we're altering will do it for us.
    $form['goo_gl'] = array(
      '#type'         => 'fieldset',
      '#title'        => 'goo.gl',
      '#collapsible'  => TRUE,
      '#collapsed'    => FALSE,
      // '#tree'         => TRUE,
      '#weight'       => -99,
      // The #group value must match the name of the vertical tabs element.
      // In most cases, this is 'additional_settings'.
      '#group'        => 'additional_settings',
      // Vertical tabs provide its most usable appearance when they are used to
      // include a summary of the information contained in the fieldset. To do
      // this, we attach additional JavaScript to handle changing the summary
      // when form settings are changed.
      '#attached'     => array(
        'js' => array(
          'vertical-tabs' => drupal_get_path('module', 'goo_gl') . '/goo_gl.js',
        ),
      ),
    );

    $enabled = variable_get('goo_gl_type_' . $form['#node_type']->type, FALSE) == TRUE;
    $form['goo_gl']['goo_gl_type'] = array(
      '#type'           => 'checkbox',
      '#title'          => t('Enable'),
      '#default_value'  => $enabled,
    );

    // TO DO delete variable on module uninstallation
    // variable_del('goo_gl_article');
  }

  // 2. Here we check to see if the type and node field are set. If so, it could
  // be a node edit form.
  elseif (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] . '_node_form' == $form_id) {
    // If goo_gl is enabled for this node type, we insert our control
    // $node = $form['#node'];

    $enabled = variable_get('goo_gl_type_' . $form['#node']->type, FALSE) == TRUE;
    if ($enabled) {

      drupal_add_js(array('goo_gl' => array('enabled' => $enabled)), array('type' => 'setting'));

      $form['goo_gl'] = array(
        '#type'         => 'fieldset',
        '#title'        => 'goo.gl',
        '#collapsible'  => TRUE,
        '#collapsed'    => FALSE,
        // '#tree'         => TRUE,
        '#weight'       => -99,
        '#group'        => 'additional_settings',
        '#attached'     => array(
          'js' => array(
            'vertical-tabs' => drupal_get_path('module', 'goo_gl') . '/goo_gl.js',
          ),
        ),
      );

      $nid = isset($form['nid']['#value']) ? $form['nid']['#value'] : '';
      $default = _goo_gl_get_url($nid);
      $form['goo_gl']['goo_gl_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Use this setting instead'),
        '#default_value' => $default,
        // '#description' => t('As you type into this field, the summary will be updated in the tab.'),
      );

    }
  }
}

/**
 * Implements hook_node_insert().
 *
 * As a new node is being inserted into the database, we need to do our own
 * database inserts.
 */
function goo_gl_node_insert($node) {

  $enabled = variable_get('goo_gl_type_' . $node->type, FALSE) == TRUE;
  if ($enabled) {
    // Notice that we are ignoring any revision information using $node->nid
    db_insert('goo_gl_url')
    ->fields(array(
        'nid' => $node->nid,
        'vid' => $node->vid,
        'url' => 'goo.gl/IJ1p37'
    ))
    ->execute();
  }
}

function _goo_gl_get_url($nid) {
  if(!empty($nid)) {
    // action
    $results = db_query('select * from {goo_gl_url} where nid = :nid', array(':nid' => $nid));
    foreach($results as $result) {
      dpm($result);
      return $result->url;
    }
  } else {
    return '';
  }
}